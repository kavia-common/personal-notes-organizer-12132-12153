---
/**
 * NoteEditorModal.astro
 * A client-only modal overlay for creating & editing notes.
 * Controlled via custom window events:
 *  - 'open-editor'  with { id: string | null }
 *  - 'close-editor'
 * Emits:
 *  - 'save-note' with { id?: string, title, content, tags[] }
 */
---
<div id="editor-backdrop" class="modal-backdrop" aria-hidden="true">
  <div class="modal" role="dialog" aria-modal="true" aria-labelledby="editor-title">
    <header>
      <strong id="editor-title">Note</strong>
    </header>
    <main>
      <div class="form-grid">
        <input id="f-title" class="input" name="title" placeholder="Title" autocomplete="off" />
        <textarea id="f-content" class="textarea" name="content" placeholder="Write your note..."></textarea>
        <input id="f-tags" class="input" name="tags" placeholder="Tags (comma separated)" />
      </div>
    </main>
    <footer>
      <button id="btn-cancel" class="btn secondary" type="button">Cancel</button>
      <button id="btn-save" class="btn" type="button">Save</button>
    </footer>
  </div>
</div>

<script>
  const backdrop = document.getElementById('editor-backdrop');
  const btnCancel = document.getElementById('btn-cancel');
  const btnSave = document.getElementById('btn-save');
  const inputTitle = document.getElementById('f-title');
  const inputContent = document.getElementById('f-content');
  const inputTags = document.getElementById('f-tags');

  let editingId = null;

  function openModal() {
    backdrop?.classList.add('open');
    backdrop?.setAttribute('aria-hidden', 'false');
    window.setTimeout(() => inputTitle?.focus(), 40);
  }
  function closeModal() {
    backdrop?.classList.remove('open');
    backdrop?.setAttribute('aria-hidden', 'true');
    editingId = null;
    // clear fields
    inputTitle.value = '';
    inputContent.value = '';
    inputTags.value = '';
  }

  function setValues(n) {
    inputTitle.value = n?.title || '';
    inputContent.value = n?.content || '';
    inputTags.value = (n?.tags || []).join(', ');
  }

  function collectValues() {
    const tags = inputTags.value
      .split(',')
      .map(s => s.trim())
      .filter(Boolean);
    return {
      title: inputTitle.value.trim(),
      content: inputContent.value.trim(),
      tags
    };
  }

  btnCancel?.addEventListener('click', closeModal);
  backdrop?.addEventListener('click', (e) => {
    if (e.target === backdrop) closeModal();
  });

  function save() {
    const payload = collectValues();
    window.dispatchEvent(new CustomEvent('save-note', { detail: { id: editingId, ...payload } }));
  }
  btnSave?.addEventListener('click', save);

  // Keyboard shortcuts
  window.addEventListener('keydown', (e) => {
    const open = backdrop?.classList.contains('open');
    if (!open) return;

    if (e.key === 'Escape') {
      e.preventDefault();
      closeModal();
    }
    if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'enter') {
      e.preventDefault();
      save();
    }
  });

  // Handle open with provided data (parent supplies note details via custom event 'editor-set-data')
  window.addEventListener('editor-set-data', (e) => {
    const { note } = e.detail || {};
    setValues(note || null);
  });

  // Listen for open/close events
  window.addEventListener('open-editor', (e) => {
    editingId = (e.detail && e.detail.id) || null;
    openModal();
  });
  window.addEventListener('close-editor', closeModal);
</script>
